package com.example.myfirstapplication.screens

import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material.icons.Icons
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonColors
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Slider
import androidx.compose.material3.SliderColors
import androidx.compose.material3.SliderDefaults
import androidx.compose.material3.Text
import androidx.compose.material3.TextField
import androidx.compose.material3.TextFieldDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableFloatStateOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.colorResource
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.myfirstapplication.H5style
import com.example.myfirstapplication.R
import com.example.myfirstapplication.ui.theme.Typography

@Preview(showBackground = true)
@Composable
fun TrackerScreen(){
    LazyColumn(
        modifier = Modifier.fillMaxSize()
            .padding(start = 40.dp, end = 40.dp, top = 60.dp),
        verticalArrangement = Arrangement.spacedBy(40.dp)
    ){
        item{
            EmojiSlider()
        }
        item{
            DreamSlider()
        }
        item {
            Feedback()
        }
    }
}
val H2style = TextStyle(
    fontSize = 16.sp, fontFamily = robotoFamily,
    fontWeight = FontWeight.Medium, color = Color(0xFF4B84F1)
)

@Composable
fun EmojiSlider(){
    var sliderPosition by remember { mutableFloatStateOf(4f) } // –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–µ—Ä–µ–¥–∏–Ω—ã
    val emojis = listOf("üò≠", "üò¢", "üòû", "üòê", "üôÇ", "üòä", "üòÑ", "üòÅ", "ü§©", "ü•∞")

    Column(
        modifier = Modifier.fillMaxWidth(),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = "–í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
            fontSize = 16.sp,
            fontFamily = robotoFamily,
            fontWeight = FontWeight.Medium,
            color = colorResource(R.color.blue_main)
        )

        Spacer(Modifier.size(16.dp))

        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–º–∞–π–ª–∏–∫–∞
        Text(
            text = emojis[sliderPosition.toInt()],
            fontSize = 30.sp,
            modifier = Modifier.padding(vertical = 8.dp)
        )

        // –°–ª–∞–π–¥–µ—Ä
        Slider(
            value = sliderPosition,
            onValueChange = { sliderPosition = it },
            steps = 8, // 10 –∑–Ω–∞—á–µ–Ω–∏–π = 9 —à–∞–≥–æ–≤ –º–µ–∂–¥—É –Ω–∏–º–∏
            valueRange = 0f..9f, // –ß—Ç–æ–±—ã —Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∏–Ω–¥–µ–∫—Å–∞–º emojis
            modifier = Modifier.fillMaxWidth(),
            colors = SliderDefaults.colors(
                thumbColor = colorResource(R.color.blue_main),
                activeTrackColor = colorResource(R.color.blue_main)
            )
        )

        // –ü–æ–¥–ø–∏—Å—å –ø–æ–¥ —Å–ª–∞–π–¥–µ—Ä–æ–º
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            Text("–ü–ª–æ—Ö–æ", color = colorResource(R.color.gray))
            Text("–û—Ç–ª–∏—á–Ω–æ", color = colorResource(R.color.gray))
        }

        Spacer(Modifier.size(30.dp))

        Button(
            onClick = { /* –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è */ },
            modifier = Modifier.height(48.dp),
            colors = ButtonDefaults.buttonColors(
                containerColor = colorResource(R.color.blue_main),
                contentColor = colorResource(R.color.white)
            )
        ) {
            Text(text = "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        }
    }
}
@Composable
fun DreamSlider() {
    var durationSliderPosition by remember { mutableFloatStateOf(0f) }
    var qualitySliderPosition by remember { mutableFloatStateOf(0f) }
    Column(
        modifier = Modifier.fillMaxWidth(),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = "–ö–∞–∫ –ø—Ä–æ—à–µ–ª –í–∞—à —Å–æ–Ω?", fontSize = 16.sp,
            fontFamily = robotoFamily, fontWeight = FontWeight.Medium,
            color = colorResource(R.color.blue_main)
        )
        Spacer(Modifier.size(16.dp))
        Text(
            text = "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞", fontSize = 12.sp,
            fontWeight = FontWeight.Normal, fontFamily = robotoFamily,
            color = colorResource(R.color.gray)
        )
        Spacer(Modifier.size(16.dp))
        //–°–ª–∞–π–¥–µ—Ä –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞
        Slider(
            value = durationSliderPosition,
            onValueChange = { durationSliderPosition = it },
            steps = 9,
            valueRange = 0f..10f,
            modifier = Modifier.fillMaxWidth(),
            colors = SliderDefaults.colors(
                thumbColor = colorResource(R.color.blue_main),
                activeTrackColor = colorResource(R.color.blue_main)
            )
        )
        // –ü–æ–¥–ø–∏—Å—å –ø–æ–¥ —Å–ª–∞–π–¥–µ—Ä–æ–º
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            Text("1 —á", color = colorResource(R.color.gray))
            Text("10 —á", color = colorResource(R.color.gray))
        }
        Spacer(Modifier.size(30.dp))
        Text(
            text = "–ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ –ø–æ 10-—Ç–∏–±–∞–ª—å–Ω–æ–π —à–∫–∞–ª–µ", fontSize = 12.sp,
            fontWeight = FontWeight.Normal, fontFamily = robotoFamily,
            color = colorResource(R.color.gray)
        )
        Spacer(Modifier.size(16.dp))
        //–°–ª–∞–π–¥–µ—Ä –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞
        Slider(
            value = qualitySliderPosition,
            onValueChange = { qualitySliderPosition = it },
            steps = 9,
            valueRange = 0f..10f,
            modifier = Modifier.fillMaxWidth(),
            colors = SliderDefaults.colors(
                thumbColor = colorResource(R.color.blue_main),
                activeTrackColor = colorResource(R.color.blue_main)
            )
        )
        //–ü–æ–¥–ø–∏—Å—å –ø–æ–¥ —Å–ª–∞–π–¥–µ—Ä–æ–º
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            Text("–ü–ª–æ—Ö–æ", color = colorResource(R.color.gray))
            Text("–û—Ç–ª–∏—á–Ω–æ", color = colorResource(R.color.gray))
        }
        Spacer(Modifier.size(30.dp))
        Button(
            onClick = {},
            modifier = Modifier.height(48.dp),
            colors = ButtonColors(
                containerColor = colorResource(R.color.blue_main),
                contentColor = colorResource(R.color.white),
                disabledContainerColor = colorResource(R.color.blue_disable),
                disabledContentColor = colorResource(R.color.gray)
            )
        ) {
            Text(text = "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        }
    }
}


@Composable
fun DrugTracker() {
    Text("–¢—Ä–µ–∫–µ—Ä –ø—Ä–∏–µ–º–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤", style = H5style)
    Spacer(Modifier.size(30.dp))
    Image(
        painter = painterResource(id = R.drawable.icon_drug),
        contentDescription = "–ò–∫–æ–Ω–∫–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞",
        modifier = Modifier.size(24.dp)
    )

    Spacer(modifier = Modifier.width(15.dp))

    Text(
        text = "–ü—Ä–∏–Ω—è—Ç–æ 2/3",
        style = MaterialTheme.typography.bodyMedium,
        color = colorResource(R.color.gray)
    )
    Spacer(modifier = Modifier.width(54.dp))
    Button(
        onClick = {},
        modifier = Modifier.height(48.dp),
        colors = ButtonColors(
            containerColor = colorResource(R.color.blue_main),
            contentColor = colorResource(R.color.white),
            disabledContainerColor = colorResource(R.color.blue_disable),
            disabledContentColor = colorResource(R.color.gray)
        )
    ) {
        Text(text = "–ü–æ–¥—Ä–æ–±–Ω–µ–µ")
    }
}

@Composable
fun Feedback() {
    var feedbackText by remember { mutableStateOf("") }
    Column(
        modifier = Modifier.fillMaxWidth(),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text("–û—Ç–∫–ª–∏–∫ –ª–µ—á–∞—â–µ–º—É –≤—Ä–∞—á—É", style = H2style)
        Spacer(Modifier.size(10.dp))
        Text("–ü–æ–∂–µ–ª–∞–Ω–∏—é –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –í–∞—à–µ–º—É –ª–µ—á–∞—â–µ–º—É –≤—Ä–∞—á—É.", style = H5style)
        Spacer(Modifier.size(16.dp))
        TextField(value = feedbackText, onValueChange = { feedbackText = it},
            modifier = Modifier.fillMaxWidth().height(56.dp),
            shape = RoundedCornerShape(8.dp),
            maxLines = 1,
            textStyle = TextStyle(fontSize = 14.sp, fontFamily = robotoFamily, fontWeight = FontWeight.Normal),
            placeholder = { Text(text = "–ù–∞—á–Ω–∏ –ø–∏—Å–∞—Ç—å –∑–¥–µ—Å—å", style = H5style)},
            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Text),
            colors = TextFieldDefaults.colors(
                focusedIndicatorColor = Color.Transparent,
                unfocusedIndicatorColor = Color.Transparent,
                disabledIndicatorColor = Color.Transparent
            )
        )
        Spacer(Modifier.size(12.dp))
        //–ö–∞–ª–µ–Ω–¥–∞—Ä—å
        Spacer(Modifier.size(30.dp))
        Button(
            onClick = {},
            modifier = Modifier.height(48.dp),
            colors = ButtonColors(
                containerColor = colorResource(R.color.blue_main),
                contentColor = colorResource(R.color.white),
                disabledContainerColor = colorResource(R.color.blue_disable),
                disabledContentColor = colorResource(R.color.gray)
            )
        ) {
            Text(text = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å")
        }
    }
}


